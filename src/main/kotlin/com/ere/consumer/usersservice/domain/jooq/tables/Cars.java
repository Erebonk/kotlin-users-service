/*
 * This file is generated by jOOQ.
 */
package com.ere.consumer.usersservice.domain.jooq.tables;


import com.ere.consumer.usersservice.domain.jooq.Dbo;
import com.ere.consumer.usersservice.domain.jooq.Indexes;
import com.ere.consumer.usersservice.domain.jooq.Keys;
import com.ere.consumer.usersservice.domain.jooq.tables.records.CarsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cars extends TableImpl<CarsRecord> {

    private static final long serialVersionUID = -85477638;

    /**
     * The reference instance of <code>dbo.cars</code>
     */
    public static final Cars CARS = new Cars();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CarsRecord> getRecordType() {
        return CarsRecord.class;
    }

    /**
     * The column <code>dbo.cars.id</code>.
     */
    public final TableField<CarsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('dbo.cars_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>dbo.cars.descr</code>.
     */
    public final TableField<CarsRecord, String> DESCR = createField(DSL.name("descr"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>dbo.cars.userid</code>.
     */
    public final TableField<CarsRecord, Integer> USERID = createField(DSL.name("userid"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>dbo.cars.number</code>.
     */
    public final TableField<CarsRecord, String> NUMBER = createField(DSL.name("number"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>dbo.cars</code> table reference
     */
    public Cars() {
        this(DSL.name("cars"), null);
    }

    /**
     * Create an aliased <code>dbo.cars</code> table reference
     */
    public Cars(String alias) {
        this(DSL.name(alias), CARS);
    }

    /**
     * Create an aliased <code>dbo.cars</code> table reference
     */
    public Cars(Name alias) {
        this(alias, CARS);
    }

    private Cars(Name alias, Table<CarsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cars(Name alias, Table<CarsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Cars(Table<O> child, ForeignKey<O, CarsRecord> key) {
        super(child, key, CARS);
    }

    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CARS_ID_UINDEX, Indexes.CARS_PK);
    }

    @Override
    public Identity<CarsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CARS;
    }

    @Override
    public UniqueKey<CarsRecord> getPrimaryKey() {
        return Keys.CARS_PK;
    }

    @Override
    public List<UniqueKey<CarsRecord>> getKeys() {
        return Arrays.<UniqueKey<CarsRecord>>asList(Keys.CARS_PK);
    }

    @Override
    public Cars as(String alias) {
        return new Cars(DSL.name(alias), this);
    }

    @Override
    public Cars as(Name alias) {
        return new Cars(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cars rename(String name) {
        return new Cars(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cars rename(Name name) {
        return new Cars(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
