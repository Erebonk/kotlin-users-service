/*
 * This file is generated by jOOQ.
 */
package com.ere.consumer.usersservice.domain.jooq.tables;


import com.ere.consumer.usersservice.domain.jooq.Dbo;
import com.ere.consumer.usersservice.domain.jooq.Indexes;
import com.ere.consumer.usersservice.domain.jooq.Keys;
import com.ere.consumer.usersservice.domain.jooq.tables.records.ClientsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * client users
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Clients extends TableImpl<ClientsRecord> {

    private static final long serialVersionUID = 341469853;

    /**
     * The reference instance of <code>dbo.clients</code>
     */
    public static final Clients CLIENTS = new Clients();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClientsRecord> getRecordType() {
        return ClientsRecord.class;
    }

    /**
     * The column <code>dbo.clients.id</code>.
     */
    public final TableField<ClientsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(DSL.field("nextval('dbo.clients_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>dbo.clients.name</code>.
     */
    public final TableField<ClientsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>dbo.clients.username</code>.
     */
    public final TableField<ClientsRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>dbo.clients.password</code>.
     */
    public final TableField<ClientsRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>dbo.clients.clientid</code>.
     */
    public final TableField<ClientsRecord, String> CLIENTID = createField(DSL.name("clientid"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>dbo.clients</code> table reference
     */
    public Clients() {
        this(DSL.name("clients"), null);
    }

    /**
     * Create an aliased <code>dbo.clients</code> table reference
     */
    public Clients(String alias) {
        this(DSL.name(alias), CLIENTS);
    }

    /**
     * Create an aliased <code>dbo.clients</code> table reference
     */
    public Clients(Name alias) {
        this(alias, CLIENTS);
    }

    private Clients(Name alias, Table<ClientsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Clients(Name alias, Table<ClientsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("client users"));
    }

    public <O extends Record> Clients(Table<O> child, ForeignKey<O, ClientsRecord> key) {
        super(child, key, CLIENTS);
    }

    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CLIENTS_PK);
    }

    @Override
    public Identity<ClientsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CLIENTS;
    }

    @Override
    public UniqueKey<ClientsRecord> getPrimaryKey() {
        return Keys.CLIENTS_PK;
    }

    @Override
    public List<UniqueKey<ClientsRecord>> getKeys() {
        return Arrays.<UniqueKey<ClientsRecord>>asList(Keys.CLIENTS_PK);
    }

    @Override
    public Clients as(String alias) {
        return new Clients(DSL.name(alias), this);
    }

    @Override
    public Clients as(Name alias) {
        return new Clients(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Clients rename(String name) {
        return new Clients(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Clients rename(Name name) {
        return new Clients(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, String, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
