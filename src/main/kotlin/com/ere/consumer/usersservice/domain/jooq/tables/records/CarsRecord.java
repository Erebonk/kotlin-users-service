/*
 * This file is generated by jOOQ.
 */
package com.ere.consumer.usersservice.domain.jooq.tables.records;


import com.ere.consumer.usersservice.domain.jooq.tables.Cars;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CarsRecord extends UpdatableRecordImpl<CarsRecord> implements Record4<Integer, String, Integer, String> {

    private static final long serialVersionUID = -2055775835;

    /**
     * Setter for <code>dbo.cars.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>dbo.cars.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>dbo.cars.descr</code>.
     */
    public void setDescr(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>dbo.cars.descr</code>.
     */
    public String getDescr() {
        return (String) get(1);
    }

    /**
     * Setter for <code>dbo.cars.userid</code>.
     */
    public void setUserid(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>dbo.cars.userid</code>.
     */
    public Integer getUserid() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>dbo.cars.number</code>.
     */
    public void setNumber(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>dbo.cars.number</code>.
     */
    public String getNumber() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, Integer, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Cars.CARS.ID;
    }

    @Override
    public Field<String> field2() {
        return Cars.CARS.DESCR;
    }

    @Override
    public Field<Integer> field3() {
        return Cars.CARS.USERID;
    }

    @Override
    public Field<String> field4() {
        return Cars.CARS.NUMBER;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getDescr();
    }

    @Override
    public Integer component3() {
        return getUserid();
    }

    @Override
    public String component4() {
        return getNumber();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getDescr();
    }

    @Override
    public Integer value3() {
        return getUserid();
    }

    @Override
    public String value4() {
        return getNumber();
    }

    @Override
    public CarsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public CarsRecord value2(String value) {
        setDescr(value);
        return this;
    }

    @Override
    public CarsRecord value3(Integer value) {
        setUserid(value);
        return this;
    }

    @Override
    public CarsRecord value4(String value) {
        setNumber(value);
        return this;
    }

    @Override
    public CarsRecord values(Integer value1, String value2, Integer value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CarsRecord
     */
    public CarsRecord() {
        super(Cars.CARS);
    }

    /**
     * Create a detached, initialised CarsRecord
     */
    public CarsRecord(Integer id, String descr, Integer userid, String number) {
        super(Cars.CARS);

        set(0, id);
        set(1, descr);
        set(2, userid);
        set(3, number);
    }
}
